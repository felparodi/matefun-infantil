import { METHOD_FUNCTION, VALUES_TYPES } from '../constants/constants';
import { FuncPipe } from '../classes/pipes/funcPipe';

const defaultFunctions = [
    //MATH
    new FuncPipe(METHOD_FUNCTION.NEGATIVO, [VALUES_TYPES.NUMBER], VALUES_TYPES.NUMBER),
    new FuncPipe(METHOD_FUNCTION.ADD, [VALUES_TYPES.NUMBER, VALUES_TYPES.NUMBER], VALUES_TYPES.NUMBER),
    new FuncPipe(METHOD_FUNCTION.SUB, [VALUES_TYPES.NUMBER, VALUES_TYPES.NUMBER], VALUES_TYPES.NUMBER),
    new FuncPipe(METHOD_FUNCTION.MUL, [VALUES_TYPES.NUMBER, VALUES_TYPES.NUMBER], VALUES_TYPES.NUMBER),
    new FuncPipe(METHOD_FUNCTION.DIV, [VALUES_TYPES.NUMBER, VALUES_TYPES.NUMBER], VALUES_TYPES.NUMBER),
    new FuncPipe(METHOD_FUNCTION.EXP, [VALUES_TYPES.NUMBER, VALUES_TYPES.NUMBER], VALUES_TYPES.NUMBER),
    new FuncPipe(METHOD_FUNCTION.RAIZ, [VALUES_TYPES.NUMBER], VALUES_TYPES.NUMBER),
    //CONDITION
    new FuncPipe(METHOD_FUNCTION.AND, [VALUES_TYPES.BOOLEAN, VALUES_TYPES.BOOLEAN], VALUES_TYPES.BOOLEAN),
    new FuncPipe(METHOD_FUNCTION.EQUAL, [VALUES_TYPES.GENERIC, VALUES_TYPES.GENERIC], VALUES_TYPES.BOOLEAN),
    new FuncPipe(METHOD_FUNCTION.N_EQUAL, [VALUES_TYPES.GENERIC, VALUES_TYPES.GENERIC], VALUES_TYPES.BOOLEAN),
    new FuncPipe(METHOD_FUNCTION.GREAT, [VALUES_TYPES.NUMBER, VALUES_TYPES.NUMBER], VALUES_TYPES.BOOLEAN),
    new FuncPipe(METHOD_FUNCTION.E_GREAT, [VALUES_TYPES.NUMBER, VALUES_TYPES.NUMBER], VALUES_TYPES.BOOLEAN),
    new FuncPipe(METHOD_FUNCTION.LEST, [VALUES_TYPES.NUMBER, VALUES_TYPES.NUMBER], VALUES_TYPES.BOOLEAN),
    new FuncPipe(METHOD_FUNCTION.E_LEST, [VALUES_TYPES.NUMBER, VALUES_TYPES.NUMBER], VALUES_TYPES.BOOLEAN),
    //GRAPH
    new FuncPipe(METHOD_FUNCTION.CIRC, [VALUES_TYPES.NUMBER], VALUES_TYPES.FIGURE),
    new FuncPipe(METHOD_FUNCTION.RECT, [VALUES_TYPES.NUMBER, VALUES_TYPES.NUMBER], VALUES_TYPES.FIGURE),
    new FuncPipe(METHOD_FUNCTION.LINEA, [VALUES_TYPES.POINT, VALUES_TYPES.POINT], VALUES_TYPES.FIGURE),
    new FuncPipe(METHOD_FUNCTION.POLI, [VALUES_TYPES.list(VALUES_TYPES.POINT)], VALUES_TYPES.FIGURE),
    new FuncPipe(METHOD_FUNCTION.COLOR, [VALUES_TYPES.FIGURE, VALUES_TYPES.COLOR], VALUES_TYPES.FIGURE),
    new FuncPipe(METHOD_FUNCTION.ROTAR, [VALUES_TYPES.FIGURE, VALUES_TYPES.NUMBER], VALUES_TYPES.FIGURE),
    new FuncPipe(METHOD_FUNCTION.JUNTAR, [VALUES_TYPES.FIGURE, VALUES_TYPES.FIGURE], VALUES_TYPES.FIGURE),
    new FuncPipe(METHOD_FUNCTION.ESCALAR, [VALUES_TYPES.FIGURE, VALUES_TYPES.NUMBER], VALUES_TYPES.FIGURE),
    new FuncPipe(METHOD_FUNCTION.MOVER, [VALUES_TYPES.FIGURE, VALUES_TYPES.POINT], VALUES_TYPES.FIGURE),
    //LIST
    new FuncPipe(METHOD_FUNCTION.CONCAT, [VALUES_TYPES.GENERIC, VALUES_TYPES.list(VALUES_TYPES.GENERIC)], VALUES_TYPES.list(VALUES_TYPES.GENERIC)),
]

export function getDefaultFunction(name) {
    const def = defaultFunctions.find(f => f.name === name);
    if (def) {
        return new FuncPipe(def.name, def.inTypes, def.outType);
    }
    return undefined;
}